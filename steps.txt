- set up index and urls
- set up templates and static files

- static files don't load in production so we'll go to urls.py and add 
        from django.conf.urls.static import static
        from django.conf import settings

        urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
        urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
- then in settings.py we'll add
        STATIC_ROOT = os.path.join(BASE_DIR, 'static')
- then in the terminal, we run 'python manage.py collectstatic'

- the imageField requires the pillow dependency

- setting the url to link to a section of the same page just requires giving the section an id and setting href to #id_name


***SLUGFIELD***
- first import slugify
- add a slug field to the models we want to slugify [testimony and events]
- run a migration after 
- we'll override the save method for the models to set somethings for slug. normally, you should do this with signals but i'll learn that later
- slugs have to be unique kinda like ids so we'll write a function to check for that
- this by adding a new model
- we'll update all the models in events and testimonies by just saving them again in the admin page. not updating it will 
break the urls
- next we go to the urls.py and add slug to the paths instead of the pk
- also change pk in views and in the templates to slug

***CKEDITOR***
- This is a rich text editor that allows us to add images, styling and all that fun stuff to our text model or something
- first, we pip install django-ckeditor and add it to installed apps in settings
- next, we import richtextfield from ckeditor.fields and make our models use that
- next run migrations because yes. To make sure it worked
- in the html page, it looks weird, so we'll add '|safe' to the parts of the page that use the editor

- we can't upload images yet, so in settings, we'll install ckeditor_uploader
                CKEDITOR_UPLOAD_PATH = 'uploads/'

- we'll also set the upload path in settings.py
- we'll also set the url parameters in the main urls.py file for the project
                path('ckeditor/', include('ckeditor_uploader.urls'))
- i think this'll create the folder for us after we run collectstatic which is the next step.
- nope, i had to create the uploads folder in my static folder
- now in models, we import ckeditor_uploader
- okay, so we replace the richtextfield in the models with richtextuploadingfield *moyai*
- next we make migrations and boom, we good

***PAGINATION***
- In views import pginator, emptypage and pagenotaninteger
- we'll create a page and paginator variable in the views we want to have pagination in
- in the paginator variable, we'll pass the max number of events we want on a single page(6)
- some try except stuff because... ye. idg try except quite yet
- next we add if statements in the html template to make the active page active and yadda yadda yadda
- there's more stuff like first and last buttons, but... tired